[{"/Users/victorhachkajlo/Desktop/ts-weather/src/index.tsx":"1","/Users/victorhachkajlo/Desktop/ts-weather/src/App.tsx":"2","/Users/victorhachkajlo/Desktop/ts-weather/src/components/useForecast.ts":"3","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Forecast.tsx":"4","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Search.tsx":"5","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Tile.tsx":"6","/Users/victorhachkajlo/Desktop/ts-weather/src/helpers/index.ts":"7","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Sunrise.tsx":"8","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Sunset.tsx":"9","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Pop.tsx":"10","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Feels.tsx":"11","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Pressure.tsx":"12","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Wind.tsx":"13","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Visibility.tsx":"14","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Humidity.tsx":"15"},{"size":264,"mtime":1683968778757,"results":"16","hashOfConfig":"17"},{"size":853,"mtime":1684148366505,"results":"18","hashOfConfig":"17"},{"size":1722,"mtime":1684150939242,"results":"19","hashOfConfig":"17"},{"size":4209,"mtime":1684155020326,"results":"20","hashOfConfig":"17"},{"size":1997,"mtime":1684088204182,"results":"21","hashOfConfig":"17"},{"size":1065,"mtime":1684154598635,"results":"22","hashOfConfig":"17"},{"size":1457,"mtime":1683968778757,"results":"23","hashOfConfig":"17"},{"size":593,"mtime":1683968778756,"results":"24","hashOfConfig":"17"},{"size":592,"mtime":1683968778756,"results":"25","hashOfConfig":"17"},{"size":411,"mtime":1683968778756,"results":"26","hashOfConfig":"17"},{"size":955,"mtime":1683968778756,"results":"27","hashOfConfig":"17"},{"size":2434,"mtime":1683968778756,"results":"28","hashOfConfig":"17"},{"size":3421,"mtime":1683968778757,"results":"29","hashOfConfig":"17"},{"size":774,"mtime":1683968778756,"results":"30","hashOfConfig":"17"},{"size":1433,"mtime":1683968778756,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wdapvy",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/victorhachkajlo/Desktop/ts-weather/src/index.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/App.tsx",["79","80","81","82","83"],[],"import { useState, ChangeEvent, useEffect } from 'react'\nimport Forecast from './components/Forecast'\nimport Search from './components/Search'\nimport useForecast from './components/useForecast'\nimport { optionType } from './types'\n\nconst App = (): JSX.Element => {\n  const {\n    search,\n    options,\n    forecast,\n    onSubmit,\n    getOptions,\n    searchHandler,\n    setOptionsData,\n  } = useForecast()\n\n  return (\n    <main className=\"flex justify-center items-center bg-gradient-to-br from-sky-400 via-rose-400 to-lime-400 h-[100vh] w-full\">\n      {forecast ? (\n        <Forecast data={forecast} />\n      ) : (\n        <Search\n          search={search}\n          searchHandler={searchHandler}\n          options={options}\n          onSubmit={onSubmit}\n          setOptionsData={setOptionsData}\n        />\n      )}\n    </main>\n  )\n}\n\nexport default App\n","/Users/victorhachkajlo/Desktop/ts-weather/src/components/useForecast.ts",["84"],[],"import React from 'react'\nimport { useState, ChangeEvent, useEffect } from 'react'\nimport { forecastType, optionType } from '../types'\n\nconst useForecast = () => {\n  const [search, setSearch] = useState<string>('')\n  const [options, setOptions] = useState<[]>([])\n  const [city, setCity] = useState<optionType | null>()\n  const [forecast, setForecast] = useState<forecastType | null>(null)\n  const getOptions = (value: string) => {\n    fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=${value}&limit=5&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setOptions(data)\n      })\n      .catch((err) => console.log(err + 'err'))\n  }\n  const getForecast = (option: optionType) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${option.lat}&lon=${option.lon}&units=metric&exclude={part}&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        const forecastData = {\n          ...data.city,\n          list: data.list.slice(0, 16),\n        }\n        setForecast(forecastData)\n      })\n  }\n\n  const searchHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value)\n    if (e.target.value === '') return\n    getOptions(e.target.value)\n  }\n  const setOptionsData = (option: optionType) => {\n    setCity(option)\n  }\n  const onSubmit = () => {\n    if (!city) return\n    getForecast(city)\n  }\n  useEffect(() => {\n    if (city) {\n      setSearch(city.name)\n\n      setOptions([])\n    }\n  }, [city])\n  return {\n    search,\n    options,\n    forecast,\n    onSubmit,\n    getOptions,\n    searchHandler,\n    setOptionsData,\n  }\n}\n\nexport default useForecast\n","/Users/victorhachkajlo/Desktop/ts-weather/src/components/Forecast.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Search.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Tile.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/helpers/index.ts",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Sunrise.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Sunset.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Pop.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Feels.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Pressure.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Wind.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Visibility.tsx",[],[],"/Users/victorhachkajlo/Desktop/ts-weather/src/components/Icons/Humidity.tsx",[],[],{"ruleId":"85","severity":1,"message":"86","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":1,"column":20,"nodeType":"87","messageId":"88","endLine":1,"endColumn":31},{"ruleId":"85","severity":1,"message":"90","line":1,"column":33,"nodeType":"87","messageId":"88","endLine":1,"endColumn":42},{"ruleId":"85","severity":1,"message":"91","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":20},{"ruleId":"85","severity":1,"message":"92","line":13,"column":5,"nodeType":"87","messageId":"88","endLine":13,"endColumn":15},{"ruleId":"85","severity":1,"message":"93","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":13},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'useEffect' is defined but never used.","'optionType' is defined but never used.","'getOptions' is assigned a value but never used.","'React' is defined but never used."]